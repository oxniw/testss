import React, { useState, useEffect } from "react";
import axios from "axios";
import { useLocation,Link,useNavigate } from "react-router-dom";
import "./game.css"; // Import external CSS file

const words = [
  ["Active transport", "‡∏•‡∏≥‡πÄ‡∏•‡∏µ‡∏¢‡∏á‡∏™‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏ã‡∏•‡∏•‡πå"],
  ["Cleavage furrow", "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏î‡∏Å‡∏¥‡πà‡∏ß‡πÄ‡∏ã‡∏•‡∏•‡πå"],
  ["Food Vacuole", "‡∏≠‡∏≠‡πÅ‡∏Å‡πÄ‡∏ô‡∏•‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
  ["Fermentation", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå"],
  ["Kinetochore", "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡πÇ‡∏ó‡∏£‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå"],
  ["Mitochondria", "‡∏≠‡∏≠‡πÅ‡∏Å‡πÄ‡∏ô‡∏•‡∏•‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô"],
  ["Phosphorylation", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ATP"],
  ["Tonicity", "‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏∂‡∏á‡∏ï‡∏±‡∏ß"],
  ["Replication fork", "‡∏à‡∏∏‡∏î‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ß"],
  ["Dihybrid cross", "‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡∏™‡∏≠‡∏á‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞"],
  ["Vector", "‡∏î‡∏µ‡πÄ‡∏≠‡πá‡∏ô‡πÄ‡∏≠‡∏û‡∏≤‡∏´‡∏∞"],
  ["Complete flower", "‡∏î‡∏≠‡∏Å‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"],
  ["Aerating root", "‡∏£‡∏≤‡∏Å‡∏´‡∏≤‡∏¢‡πÉ‡∏à"],
  ["Cladophyll", "‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÉ‡∏ö"],
  ["Leaf tendril", "‡πÉ‡∏ö‡∏°‡∏∑‡∏≠‡πÄ‡∏Å‡∏≤‡∏∞"],
  ["Tendril stem", "‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏°‡∏∑‡∏≠‡πÄ‡∏Å‡∏≤‡∏∞"],
  ["Suberin", "‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥"],
  ["Thorny root", "‡∏£‡∏≤‡∏Å‡∏´‡∏ô‡∏≤‡∏°"],
  ["Wood", "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πâ"],
  ["Vein", "‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ö"]
];

const Game = () => {
  const navigate = useNavigate();
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(15);
  const [currentQuestion, setCurrentQuestion] = useState({});
  const [isGameOver, setIsGameOver] = useState(false);
  const location = useLocation();
  const [name,getname] = useState(location.state?.name || "Guest");
  const [userData,GetuserData] = useState(location.state?.userData || { sources: {}});
  const ip1 = "http://192.168.1.2:8080/api/v4"
  useEffect(() => {
    if (timeLeft <= 0) {
      endGame();
      return;
    }

    const timer = setTimeout(() => {
      setTimeLeft(timeLeft - 1);
    }, 1000);

    return () => clearTimeout(timer);
  }, [timeLeft]);

  const nextQuestion = () => {
    setTimeLeft(15);
    setIsGameOver(false);

    let [word, correctDef] = words[Math.floor(Math.random() * words.length)];
    let shownDef =
      Math.random() > 0.5 ? correctDef : words[Math.floor(Math.random() * words.length)][1];

    setCurrentQuestion({ word, shownDef, answer: shownDef === correctDef });
  };

  const checkAnswer = (userAnswer) => {
    if (userAnswer === currentQuestion.answer) {
      setScore(score + 1);
      nextQuestion();
    } else {
      endGame();
    }
  };

  const endGame = () => {
    alert(`‡πÅ‡∏û‡πâ‡∏•‡∏∞‡∏≠‡∏µ‡πÇ‡∏´‡∏á‡πâ5555 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${score}`);
    setIsGameOver(true);
    restartGame();
  };

  const restartGame = () => {
    setScore(0);
    nextQuestion();
    const senddata = async (event) => {
        
        const send =  await axios.post(ip1, {
          username: name,
          score:score,
        });
    }
    senddata();
  };
  const home = () => {
    navigate("/home", { state: {name: name , userData:userData} });
  }
  useEffect(() => {
    nextQuestion();
  }, []);

  return (
    <div className="container">
      <div className="card">
        <button onClick={home}>home</button>
        <h1 className="title">‡∏ó‡∏≤‡∏¢‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏ö‡πÇ‡∏≠</h1>
        <h2 className="word">{currentQuestion.word || "..."}</h2>
        <p className="definition">{currentQuestion.shownDef || "..."}</p>
        <p className="timer">‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <b>{timeLeft}</b> ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</p>
        <p className="score">üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: <b>{score}</b></p>
        <div className="buttons">
          <button onClick={() => checkAnswer(true)} className="correct-btn">‚úÖ ‡∏ñ‡∏π‡∏Å</button>
          <button onClick={() => checkAnswer(false)} className="wrong-btn">‚ùå ‡∏ú‡∏¥‡∏î</button>
          {isGameOver && (
            <button onClick={restartGame} className="restart-btn">üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</button>
          )}
        </div>
      </div>
    </div>
  );
};

export default Game;
